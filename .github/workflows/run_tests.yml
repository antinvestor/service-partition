name: Service testing action

on: [push]

jobs:

  build:

    runs-on: ubuntu-latest

#    # Service containers to run with `container-job`
#    services:
#      # Label used to access the service container
#      postgresd:
#        image: postgres
#        env:
#          POSTGRES_USER: partition
#          POSTGRES_PASSWORD: secret
#          POSTGRES_DB: partitiondatabase
#        options: >-
#          --health-cmd pg_isready
#          --health-interval 10s
#          --health-timeout 5s
#          --health-retries 5
#

    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-go@v2
        with:
          go-version: '1.15'

      - name: Install dependencies
        run: |
          go version
          go get -u golang.org/x/lint/golint

      - name: Build the docker-compose stack
        run: docker-compose -f "tests_runner/docker-compose.yml" up -d --build

      - name: Wait for postgresql to come up
        run: count=0; while ! nc -z localhost 5423 && [[ count -lt 30 ]]; (( count += 1 )); do sleep 1; echo "waiting for postgresql"; done;

      - name: Wait for keto to come up
        run: count=0; while ! nc -z localhost 4467 && [[ count -lt 20 ]]; (( count += 1 )); do sleep 1; echo "waiting for keto"; done;

      - name: Wait for hydra to come up
        run: count=0; while ! nc -z localhost 4445 && [[ count -lt 20 ]]; (( count += 1 )); do sleep 1; echo "waiting for hydra"; done;

      - name: Allow 10 seconds for migrations to complete if any
        run: sleep 10s

      - name: Print out logs to help with debugging
        run: docker-compose -f ./tests_runner/docker-compose.yml logs

      - name: Test partition service
        run: go test  ./...

      - name: Run Vet & Lint
        run: |
          go vet .
          golint -set_exit_status=1 .

      - name: Stop containers
        run: docker-compose -f "tests_runner/docker-compose.yml" down

      # Setting up Docker Builder
      - name: Set up Docker Builder
        uses: docker/setup-buildx-action@v1

      # Set Github Access Token with "write:packages & read:packages" scope for Github Container Registry.
      # Then go to repository setings and add the copied token as a secret called "CR_PAT"
      # https://github.com/settings/tokens/new?scopes=repo,write:packages&description=Github+Container+Registry
      # ! While GHCR is in Beta make sure to enable the feature
      - name: Logging into GitHub Container Registry
        uses: docker/login-action@v1
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.CR_PAT }}

      # Push to Github Container Registry
      - name: Pushing Image to Github Container Registry
        uses: docker/build-push-action@v2
        with:
          context: ./
          version: latest
          file: ./Dockerfile
          push: true
          tags: ghcr.io/${{ github.repository }}:latest
